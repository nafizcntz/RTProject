 /*
        //int width = 963; //width of the image 
	//int height = 640; //height of the image 

	BufferedImage img = null; 

		// READ IMAGE 
	try
	{ 
            File input_file = new File("C:\\Users\\Nafiz\\Documents\\NetBeansProjects\\RTProject\\src\\rtproject\\input.jpg"); //image file path 

            //image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB); 

            // Reading input file 
            img = ImageIO.read(input_file); 

            System.out.println("Reading complete."); 
	} 
	catch(IOException e) 
	{ 
            System.out.println("Error: "+e); 
	} 
        */
        /*--------------------------------------------------------------------*/
      /*
        int width = img.getWidth(); 
        int height = img.getHeight(); 
  
        int p = img.getRGB(0,0); 
  
        // get alpha 
        int a = (p>>24) & 0xff; 
  
        // get red 
        int r = (p>>16) & 0xff; 
  
        // get green 
        int g = (p>>8) & 0xff; 
  
        // get blue 
        int b = p & 0xff; 
  
      
        a = 255; 
        r = 100; 
        g = 150; 
        b = 200; 
  
        //set the pixel value 
        p = (a<<24) | (r<<16) | (g<<8) | b; 
        img.setRGB(0, 0, p); 
        */
        /*--------------------------------------------------------------------*/
       /*
            // Output file path 
            File output_file = new File("C:\\Users\\Nafiz\\Documents\\NetBeansProjects\\RTProject\\src\\rtproject\\output.jpg"); 

            // Writing to file taking type and path as 
            ImageIO.write(img, "jpg", output_file); 

            System.out.println("Writing complete."); */
   
       /*
       double matrix[][] = { { 1/ 9, 1/ 9, 1/ 9}, 
                        { 1/ 9, 1/ 9, 1/ 9}, 
                        { 1/ 9, 1/ 9, 1/ 9} }; 
       
       //int filtre[][] = matrix[][] / 9;
       //filtre = double(filtre);

       Output = zeros(size(img));

        for (i = 1;size(img, 1)-2)
            for j = 1:size(img, 1)-2
                Temp = img(i : i+2, j : j+2).*filtre(3,3,:);
                Output(i, j) = sum(Temp(:));
       
        for (int y = StartHeight; y < height+StartHeight; y++) 
        { 
            for (int x = StartWidth; x < width+StartWidth; x++) 
            { 
                 
            } 
        } */
       /*
       int maxWidth = img.getWidth(); 
       int maxHeight = img.getHeight();
       int pictureFile[][] = new int [maxHeight][maxWidth];
        for( int i = 0; i < maxHeight; i++ ){
            for( int j = 0; j < maxWidth; j++ ){
                pictureFile[i][j] = img.getRGB( j, i );
            }
        }
        
        int output [][] = new int [maxHeight][maxWidth];

        //Apply Mean Filter
        for (int v=1; v<maxHeight; v++) {
            for (int u=1; u<maxWidth; u++) {
                //compute filter result for position (u,v)

                int sum = 0;
                for (int j=-1; j<=1; j++) {
                    for (int i=-1; i<=1; i++) {
                        if((u+(j)>=0 && v+(i)>=0 && u+(j)<maxWidth && v+(i)<maxHeight)){
                        int pixel=pictureFile[u+i][v+j];
                        int rr=(pixel&0x00ff0000)>>16, rg=(pixel&0x0000ff00)>>8, rb=pixel&0x000000ff;
                        sumr+=rr;
                        sumg+=rg;
                        sumb+=rb;
                        }
                    }
                }

                int q = (int) (sum /9);
                output[v][u] = q;
            }
        }

        //Turn the 2D array back into an image
        BufferedImage theImage = new BufferedImage(
            maxHeight, 
            maxWidth, 
            BufferedImage.TYPE_INT_RGB);
        int value;
        for(int y = 1; y<maxHeight; y++){
            for(int x = 1; x<maxWidth; x++){
                value = output[y][x] ;
                theImage.setRGB(y, x, value);
            }
        }
       */